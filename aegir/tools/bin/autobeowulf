#!/bin/bash


###----------------------------------------###
###
###  Automatic BOA System Major Upgrade Tool
###
###  Copyright (C) 2010-2023 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://github.com/omega8cc/boa
###
###----------------------------------------###


###----------------------------------------###
### HOW-TO: Launch auto-upgrade properly   ###
###----------------------------------------###
###
###  Start with manual barracuda upgrade.
###
###    $ barracuda up-head system
###
###  !!! CREATE A FRESH VM BACKUP SNAPSHOT !!!
###  !!! TEST THE FRESHLY CREATED BACKUP.. !!!
###  !!! BY USING IT TO CREATE NEW TEST VM !!!
###  !!! DO NOT CONTINUE UNTIL IT WORKS... !!!
###
###  Reboot the server to make sure there are
###  no issues with boot process.
###
###    $ reboot
###
###  If reboot worked and there are no issues,
###  you are ready for the automated magic...
###
###    $ touch /root/.run-to-beowulf.cnf
###    $ service clean-boa-env start
###
###  Once enabled, the system will launch
###  a series of barracuda up-head and reboots
###  until it migrates any supported Debian
###  version to Devuan Beowulf -- excluding
###  however Debian Bullseye which can be
###  upgraded only to Devuan Chimaera.
###
###  !!! WARNING !!!
###
###  EXPECT IT TO CRASH COMPLETELY, SO ONLY
###  FULL RESTORE FROM LATEST BACKUP SNAPSHOT
###  OF ENTIRE VM WILL BRING IT BACK TO LIVE.
###
###  DO NOT PROCEED UNTIL YOU ARE READY FOR
###  DISASTER RECOVERY FROM TESTED BACKUP!
###
###----------------------------------------###


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash
barCnf="/root/.barracuda.cnf"
logAbf="/root/.autobeowulf.log"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

_TODAY=$(date +%y%m%d 2>&1)
_TODAY=${_TODAY//[^0-9]/}
_X_SE="414prodT61"
_THIS_SYS=check
#

check_root() {
  if [ `whoami` = "root" ]; then
    ionice -c2 -n7 -p $$
    renice 19 -p $$
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
  else
    echo "ERROR: This script should be ran as a root user"
    exit 1
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    exit 1
  fi
}
check_root
cd /root/

###
### Noticeable messages
###
msg() {
  echo "AutoBeowulf [$(date +%T 2>&1)] ==> $*"
}

###
### Faster reboot
###
faster_reboot() {
  msg "Faster reboot prepare..." >> ${logAbf}
  service cron stop &> /dev/null
  if [ -e "/etc/init.d/clamav-daemon" ]; then
    update-rc.d -f clamav-daemon remove &> /dev/null
  fi
  if [ -e "/etc/init.d/clamav-freshclam" ]; then
    update-rc.d -f clamav-freshclam remove &> /dev/null
  fi
  sleep 60
  kill -9 $(ps aux | grep '[s]econd.sh' | awk '{print $2}') &> /dev/null
  sleep 15
  kill -9 $(ps aux | grep '[s]econd.sh' | awk '{print $2}') &> /dev/null
  sleep 15
  service nginx stop &> /dev/null
  kill -9 $(ps aux | grep '[a]vahi-daemon' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[c]lamd' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[f]reshclam' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[j]ava' | awk '{print $2}') &> /dev/null
  service nginx stop &> /dev/null
  _PHP_V="82 81 74 73 72 71 70 56"
  for e in ${_PHP_V}; do
    if [ -e "/etc/init.d/php${e}-fpm" ]; then
      service php${e}-fpm force-quit &> /dev/null
    fi
  done
  kill -9 $(ps aux | grep '[p]hp-fpm' | awk '{print $2}') &> /dev/null
  msg "Faster reboot done" >> ${logAbf}
}

if [ ! -e "/root/.run-to-beowulf.cnf" ] \
  || [ ! -e "${barCnf}" ]; then
  exit 1
fi

_CHECK_SYS=$(lsb_release -sc 2>&1)
if [ -e "/root/.auto-upgraded-to-beowulf.cnf" ] \
  && [ "${_CHECK_SYS}" = "beowulf" ]; then
  exit 1
fi

_DB_SERIES=5.7
_DB_SERVER_TEST=$(mysql -V 2>&1)
if [[ ! "${_DB_SERVER_TEST}" =~ "Distrib ${_DB_SERIES}." ]]; then
  msg "Not supported DB server detected ${_DB_SERVER_TEST}" >> ${logAbf}
  exit 1
fi

if [ -e "/root/.run-to-beowulf.cnf" ]; then
  echo " " >> ${logAbf}
  if [ -e "/root/.run-auto-major-os-reboot-one.cnf" ] \
    || [ -e "/root/.run-auto-major-os-reboot-two.cnf" ]; then
    msg "Waiting 15 seconds for the system start scripts to finish" >> ${logAbf}
    sleep 15
  else
    msg "Automatic BOA System Major Upgrade Tool welcomes you aboard!" >> ${logAbf}
    sleep 3
  fi
fi

_AUTO_BEOWULF_TEST=$(grep _AUTO_BEOWULF ${barCnf} 2>&1)
if [[ ! "${_AUTO_BEOWULF_TEST}" =~ "_AUTO_BEOWULF" ]]; then
  echo "_AUTO_BEOWULF=YES" >> ${barCnf}
fi

if [ -e "/root/.run-to-beowulf.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-one.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-two.cnf" ]; then
  echo " " >> ${logAbf}
  msg "Launching standard barracuda up-head system first" >> ${logAbf}
  barracuda up-head system
  wait
  msg "The initial barracuda up-head system completed" >> ${logAbf}
  if [ -e "/root/.latest-barracuda-upgrade-finale.info" ]; then
    _THIS_OS=$(lsb_release -si 2>&1)
    _THIS_SYS=$(lsb_release -sc 2>&1)
    _REAL_OS="${_THIS_OS}"
    _REAL_OSR="${_THIS_SYS}"
    if [ "${_REAL_OSR}" = "jessie" ]; then
      echo "_JESSIE_TO_BEOWULF=YES" >> ${barCnf}
      msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/beowulf" >> ${logAbf}
    elif [ "${_REAL_OSR}" = "stretch" ]; then
      echo "_STRETCH_TO_BEOWULF=YES" >> ${barCnf}
      msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/beowulf" >> ${logAbf}
    elif [ "${_REAL_OSR}" = "buster" ]; then
      echo "_BUSTER_TO_BEOWULF=YES" >> ${barCnf}
      msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/beowulf" >> ${logAbf}
    fi
    msg "The first stage of major OS upgrade will start now" >> ${logAbf}
    barracuda up-head system
    wait
    if [ -e "/root/.run_post_major_os_upgrade.info" ]; then
      msg "The first stage of major OS upgrade completed" >> ${logAbf}
      msg "The system will reboot now" >> ${logAbf}
      rm -f /root/.latest-barracuda-upgrade-finale.info
      touch /root/.run-auto-major-os-reboot-one.cnf
      faster_reboot
      reboot
      exit 0
    fi
  fi
fi

if [ -e "/root/.run-to-beowulf.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-one.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-two.cnf" ]; then
  echo " " >> ${logAbf}
  msg "Launching post-reboot barracuda up-head system" >> ${logAbf}
  msg "to complete the first stage of major OS upgrade" >> ${logAbf}
  barracuda up-head system
  wait
  msg "The post-reboot barracuda up-head system completed" >> ${logAbf}
  echo " " >> ${logAbf}
  if [ -e "/root/.latest-barracuda-upgrade-finale.info" ]; then
    msg "The single stage major OS upgrade completed" >> ${logAbf}
    msg "The system will reboot now for a final upgrade" >> ${logAbf}
    rm -f /root/.latest-barracuda-upgrade-finale.info
    touch /root/.run-auto-major-os-reboot-two.cnf
    faster_reboot
    reboot
    exit 0
  fi
fi

if [ -e "/root/.run-to-beowulf.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-one.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-two.cnf" ]; then
  echo " " >> ${logAbf}
  msg "Launching the final post-second-reboot barracuda up-head system" >> ${logAbf}
  barracuda up-head system
  wait
  rm -f /root/.run-to-beowulf.cnf
  rm -f /root/.run-auto-major-os-reboot-one.cnf
  rm -f /root/.run-auto-major-os-reboot-two.cnf
  touch /root/.auto-upgraded-to-beowulf.cnf
  sed -i "s/^_AUTO_BEOWULF.*//g" /root/.barracuda.cnf
  msg "The final post-reboot barracuda up-head system completed" >> ${logAbf}
  msg "That's all folks!" >> ${logAbf}
  msg "Bye!" >> ${logAbf}
  echo " " >> ${logAbf}
fi

exit 0
